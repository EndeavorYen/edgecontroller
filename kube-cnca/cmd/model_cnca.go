// Copyright 2019 Intel Corporation. All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cnca

// TrafficPolicy describes CNCA traffic policy
type TrafficPolicy struct {
	Version string `yaml:"apiVersion"`
	Kind    string `yaml:"kind"`
	Policy  struct {
		// Identifies a service on behalf of which the AF is issuing the request.
		AfServiceID string `yaml:"afServiceId,omitempty"`
		// Identifies an application.
		AfAppID string `yaml:"afAppId,omitempty"`
		// Identifies an NEF Northbound interface transaction, generated by the AF.
		AfTransID string `yaml:"afTransId,omitempty"`
		// Identifies whether an application can be relocated once a location of the application has been selected.
		AppReloInd bool `yaml:"appReloInd,omitempty"`
		// Identifies data network name
		Dnn string `yaml:"dnn,omitempty"`
		// Snssai
		Snssai struct {
			Sst int32 `yaml:"sst"`
			Sd string `yaml:"sd,omitempty"`
		} `yaml:"snssai,omitempty"`
		// Identifies whether the AF request applies to any UE.
		AnyUeInd bool `yaml:"anyUeInd,omitempty"`
		// Gpsi
		Gpsi string `yaml:"gpsi,omitempty"`
		// string identifying a Ipv4 address formatted in the \"dotted decimal\" notation as defined in IETF RFC 1166.
		Ipv4Addr string `yaml:"ipv4Addr,omitempty"`
		// string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952.
		Ipv6Addr string `yaml:"ipv6Addr,omitempty"`
		// string identifying MAC Address
		MacAddr string `yaml:"macAddr,omitempty"`
		// Set to true by the AF to request the NEF to send a test notification. Set to false or omitted otherwise.
		RequestTestNotification bool `yaml:"requestTestNotification,omitempty"`
		// WebsockNotifConfig
		WebsockNotifConfig struct {
			WebsocketURI string `yaml:"websocketUri,omitempty"`
			RequestWebsocketURI bool `yaml:"requestWebsocketUri,omitempty"`
		} `yaml:"websockNotifConfig,omitempty"`
		// Identifies the N6 traffic routing requirement.
		TrafficRoutes []struct {
			Dnai string `yaml:"dnai"`
			RouteInfo struct {
				Ipv4Addr string `yaml:"ipv4Addr,omitempty"`
				Ipv6Addr string `yaml:"ipv6Addr,omitempty"`
				PortNumber int32 `yaml:"portNumber"`
			} `yaml:"routeInfo,omitempty"`
			RouteProfID string `yaml:"routeProfId,omitempty"`
		} `yaml:"trafficRoutes,omitempty"`
	} `yaml:"policy"`
}
