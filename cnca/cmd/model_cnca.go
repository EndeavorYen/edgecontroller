// Copyright 2019 Intel Corporation. All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cnca

// Header holds version & type of YAML configuration
type Header struct {
	Version string `yaml:"apiVersion"`
	//  ngc: 5G Traffic Influence Subscription, or
	//  lte: LTE CUPS Userplane
	Kind    string `yaml:"kind"`
}

// AFTrafficInfluSub describes 5G AF Traffic Influence Subscription
type AFTrafficInfluSub struct {
	H Header
	Policy  struct {
		// Identifies a service on behalf of which the AF is issuing the request.
		AfServiceID string `yaml:"afServiceId,omitempty"`
		// Identifies an application.
		AfAppID string `yaml:"afAppId,omitempty"`
		// Identifies an NEF Northbound interface transaction, generated by the AF.
		AfTransID string `yaml:"afTransId,omitempty"`
		// Identifies whether an application can be relocated once a location of the application has been selected.
		AppReloInd bool `yaml:"appReloInd,omitempty"`
		// Identifies data network name
		Dnn string `yaml:"dnn,omitempty"`
		// Snssai
		Snssai struct {
			Sst int32 `yaml:"sst"`
			Sd string `yaml:"sd,omitempty"`
		} `yaml:"snssai,omitempty"`
		// Identifies whether the AF request applies to any UE.
		AnyUeInd bool `yaml:"anyUeInd,omitempty"`
		// Gpsi
		Gpsi string `yaml:"gpsi,omitempty"`
		// string identifying a Ipv4 address formatted in the \"dotted decimal\" notation as defined in IETF RFC 1166.
		Ipv4Addr string `yaml:"ipv4Addr,omitempty"`
		// string identifying a Ipv6 address formatted according to clause 4 in IETF RFC 5952.
		Ipv6Addr string `yaml:"ipv6Addr,omitempty"`
		// string identifying MAC Address
		MacAddr string `yaml:"macAddr,omitempty"`
		// Set to true by the AF to request the NEF to send a test notification. Set to false or omitted otherwise.
		RequestTestNotification bool `yaml:"requestTestNotification,omitempty"`
		// WebsockNotifConfig
		WebsockNotifConfig struct {
			WebsocketURI string `yaml:"websocketUri,omitempty"`
			RequestWebsocketURI bool `yaml:"requestWebsocketUri,omitempty"`
		} `yaml:"websockNotifConfig,omitempty"`
		// Identifies the N6 traffic routing requirement.
		TrafficRoutes []struct {
			Dnai string `yaml:"dnai"`
			RouteInfo struct {
				Ipv4Addr string `yaml:"ipv4Addr,omitempty"`
				Ipv6Addr string `yaml:"ipv6Addr,omitempty"`
				PortNumber int32 `yaml:"portNumber"`
			} `yaml:"routeInfo,omitempty"`
			RouteProfID string `yaml:"routeProfId,omitempty"`
		} `yaml:"trafficRoutes,omitempty"`
	} `yaml:"policy"`
}

// LTEUserplane describes LTE Userplane Configuration
type LTEUserplane struct {
	H Header
	Policy  struct {
		ID string `yaml:"id,omitempty"`
		UUID string `yaml:"uuid,omitempty"`
		Function string `yaml:"function,omitempty"`
		Config struct {
			Sxa LteConfigInfoCpup `yaml:"sxa,omitempty"`
			Sxb LteConfigInfoCpup `yaml:"sxb,omitempty"`
			S1u LteConfigInfoUp `yaml:"s1u,omitempty"`
			S5uSGW LteConfigInfoUp `yaml:"s5u_sgw,omitempty"`
			S5uPGW LteConfigInfoUp `yaml:"s5u_pgw,omitempty"`
			SGi LteConfigInfoUp `yaml:"sgi,omitempty"`
			Breakout []LteConfigInfoUp `yaml:"breakout,omitempty"`
			DNS []LteConfigInfoUp `yaml:"dns,omitempty"`
		} `yaml:"config,omitempty"`

		Selectors []struct {
			ID string `yaml:"id,omitempty"`
			Network struct {
				MCC string `yaml:"mcc,omitempty"`
				MNC string `yaml:"mnc,omitempty"`
			} `yaml:"network,omitempty"`
			ULI struct {
				TAI struct {
					// Tracking area code (TAC), which is typically an unsigned integer
					// from 1 to 2^16, inclusive.
					TAC int64 `yaml:"tac,omitempty"`
				} `yaml:"tai,omitempty"`
				ECGI struct {
					// E-UTRAN cell identifier (ECI), which is typically an unsigned integer
					// from 1 to 2^32, inclusive.
					ECI int64 `yaml:"eci,omitempty"`
				} `yaml:"ecgi,omitempty"`
			} `yaml:"uli,omitempty"`
			PDN struct {
				APNs []string `yaml:"apns,omitempty"`
			} `yaml:"pdn,omitempty"`
		} `yaml:"selectors,omitempty"`

		// The UEs that should be entitled to access privileged networks via this
		// userplane.  Note: UEs not in this list will still be able to get a bearer
		// via the userplane. The UEs in this list are just for entitlement
		// purposes. (optional)
		Entitlements []struct {
			ID string `yaml:"id,omitempty"`
			APNs []string `yaml:"apns,omitempty"`
			IMSIs []struct {
				Begin string `yaml:"begin,omitempty"`
				End string `yaml:"end,omitempty"`
			} `yaml:"imsis,omitempty"`
		} `yaml:"entitlements,omitempty"`
	}
}

// LteConfigInfoCpup Information that the userplane should configure, which
// relates to the control plane (CP) side and the user plane (UP) side.
type LteConfigInfoCpup struct {
	CpIPAddress string `yaml:"cp_ip_address,omitempty"`
	UpIPAddress string `yaml:"up_ip_address,omitempty"`
}

// LteConfigInfoUp Information that the userplane should configure, which
// relates to the user plane (UP) side only.
type LteConfigInfoUp struct {
	UpIPAddress string `yaml:"up_ip_address,omitempty"`
}
